// src/services/resumeGenerationService.ts

import { Document, Packer, Paragraph, TextRun } from 'docx';

/**
 * Creates a new .docx resume from the AI-generated text content.
 * This function no longer uses a template.
 * @param resumeText The full text of the resume generated by the AI.
 * @returns A promise that resolves to the buffer of the generated .docx file.
 */
export const generateOptimizedResume = async (resumeText: string): Promise<Buffer> => {
  try {
    console.log("Creating a new DOCX document from AI-generated text...");

    // Split the text into paragraphs to create a structured document
    const textLines = resumeText.split('\n').filter(line => line.trim() !== '');

    const paragraphs = textLines.map(line => {
      // You could add more complex logic here to identify headings, bullet points, etc.
      // For now, we will treat each line as a separate paragraph.
      return new Paragraph({
        children: [new TextRun(line)],
        spacing: { after: 120 }, // Add some spacing between paragraphs
      });
    });

    const doc = new Document({
      sections: [{
        properties: {},
        children: paragraphs,
      }],
    });

    // Pack the document into a buffer
    const buffer = await Packer.toBuffer(doc);
    console.log("DOCX document created successfully.");

    return buffer;
  } catch (error) {
    console.error('Error generating .docx file:', error);
    throw new Error('Failed to generate optimized resume document.');
  }
};